name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '13'
  POSTGRES_USER: test
  POSTGRES_PASSWORD: test
  POSTGRES_DB: test_db
  REDIS_VERSION: '6'
  # Default values for secrets (for local development/testing only)
  DOCKERHUB_USERNAME: 'yourusername'
  DOCKERHUB_TOKEN: 'yourtoken'
  PRODUCTION_HOST: 'your-production-host'
  PRODUCTION_USERNAME: 'production-user'
  PRODUCTION_SSH_KEY: 'your-ssh-key'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      # Remove root package-lock.json to avoid dependency lock file errors
      - name: Remove root package-lock.json if exists
        run: rm -f package-lock.json
      
      # Backend tests
      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: ./backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('./backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install --legacy-peer-deps
        
      - name: Run backend tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: ${{ env.POSTGRES_USER }}
          DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          DB_NAME: ${{ env.POSTGRES_DB }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_secret
        run: npm test
      
      # Frontend tests
      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('./frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
            
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps
        
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --watchAll=false --passWithNoTests
  
  build-and-deploy:
    name: Build and Deploy
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.DOCKERHUB_USERNAME }}/bulkmail-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.DOCKERHUB_USERNAME }}/bulkmail-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.PRODUCTION_HOST }}
          username: ${{ env.PRODUCTION_USERNAME }}
          key: ${{ env.PRODUCTION_SSH_KEY }}
          script: |
            cd /path/to/bulkmail
            git pull origin main
            docker-compose pull
            docker-compose up -d
